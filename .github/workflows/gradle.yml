name: Spring Boot & Gradle CI/CD

# release 브랜치에 push 또는 pull request가 되면 스크립트 실행
on:
  push:
    branches: [ "release-test" ]
  pull_request:
    branches: [ "release-test" ]

# 해당 코드에서 사용될 변수 설정
env:
  AWS_REGION: ap-northeast-2
  PROJECT_NAME: poppin-server
  S3_BUCKET_NAME: poppin-deploy-bucket
  CODE_DEPLOY_APP_NAME: poppin-prd-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: prd-deploy-gp

permissions:
  contents: read

jobs:
  build:

    # Github의 워크플로에서 실행될 OS 선택
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make application-aws.yml
        if: contains(github.ref, 'release-test')
        run: |
          cd ./src/main/resources
          ls -al
          touch ./application-aws.yml
          echo "copy properties"
          echo "${AWS_PROPERTIES}" > ./application-aws.yml
        shell: bash
        env:
          AWS_PROPERTIES: ${{ secrets.AWS_PROPERTIES }}

      - name: make fcm firebase_key file
        if: contains(github.ref, 'release-test')
        run: |
          mkdir -p ./src/main/resources/firebase
          cd ./src/main/resources/firebase
          ls -al
          touch ./firebase_key.json
          echo "copy FIREBASE_SECRET_KEY"
          echo "${FIREBASE_KEY}" > ./firebase_key.json
        shell: bash
        env:
          FIREBASE_KEY: ${{ secrets.FIREBASE_KEY }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean --stacktrace --info build
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .
        env:
          S3_BUCKET_NAME: ${{ env.S3_BUCKET_NAME }}

      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
        env:
          S3_BUCKET_NAME: ${{ env.S3_BUCKET_NAME }}
